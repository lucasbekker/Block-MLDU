GNU Octave, version 3.8.1
Copyright (C) 2014 John W. Eaton and others.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-pc-linux-gnu".

Additional information about Octave is available at http://www.octave.org.

Please contribute if you find this software useful.
For more information, visit http://www.octave.org/get-involved.html

Read http://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

matrix 1 x 1 non-singular:
Msg(css_lcu_exe): STARTING test 1:
full_A =  2
Msg(css_lcu_exe): Above matrix converted to css:
n =  1
m =  1
css_tp =

   1   2

i_tp =  1
lu_tp =

Compressed Column Sparse (rows = 2, cols = 1, nnz = 2 [100%])

  (1, 1) ->  2
  (2, 1) ->  2

n =  1
m =  1
css_tp =

   1   2

i_tp =  1
lu_tp =

Compressed Column Sparse (rows = 2, cols = 1, nnz = 2 [100%])

  (1, 1) ->  2
  (2, 1) ->  2

Msg(css_lcu_exe): Factorization time: 0.003032
full_LU =  2
n =  1
m =  1
k =  1
Test ALL (only if amount of stored columns in css equals 1 = k == min(n, m)):
Msg(css_lcu_exe): Extraction time: 0.000046
Msg(css_lcu_exe): Norm calculation time: 0.000037
Msg(css_lcu_exe): 1B. PASSED
Test VER for A(:,1:1) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.002449
full_L =  2
full_D =  2
full_U =  2
Msg(css_lcu_exe): Norm calculation time: 0.000034
Msg(css_lcu_exe): 1C. PASSED
Test HOR for A(1:1,:) amount of rows:
Msg(css_lcu_exe): 1D. PASSED
matrix 1 x 1 singular -- very special because its css representation is the empty (not zero!) css:
Msg(css_lcu_exe): STARTING test 1:
full_A = 0
Msg(css_lcu_exe): Above matrix converted to css:
n =  1
m =  1
css_tp =  1
i_tp = [](0x0)
lu_tp = Compressed Column Sparse (rows = 2, cols = 0, nnz = 0)

n =  1
m =  1
css_tp =  1
i_tp = [](0x0)
lu_tp = Compressed Column Sparse (rows = 2, cols = 0, nnz = 0)

Msg(css_lcu_exe): Factorization time: 0.000222
full_LU = 0
n =  1
m =  1
k = 0
Msg(css_lcu_exe): 1A. PASSED: lcu stopped on zero pivot -- matrix not square or singular!
Test VER for A(:,1:0) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.000900
full_L = [](1x0)
full_D = [](1x0)
full_U = [](1x0)
Msg(css_lcu_exe): Norm calculation time: 0.000047
Msg(css_lcu_exe): 1C. PASSED
Test HOR for A(1:0,:) amount of rows:
Msg(css_lcu_exe): 1D. PASSED
matrix 2 x 2 non-singular is stored with css with 1 column ...:
css must extend during factorization:
Msg(css_lcu_exe): STARTING test 1:
full_A =

   2  -1
  -1   0

Msg(css_lcu_exe): Above matrix converted to css:
n =  2
m =  2
css_tp =

   1   3

i_tp =

   1   2

lu_tp =

Compressed Column Sparse (rows = 2, cols = 2, nnz = 4 [100%])

  (1, 1) ->  2
  (2, 1) ->  2
  (1, 2) -> -1
  (2, 2) -> -1

n =  2
m =  2
css_tp =

   1   3   4

i_tp =

   1   2   2

lu_tp =

Compressed Column Sparse (rows = 2, cols = 3, nnz = 6 [100%])

  (1, 1) ->  2
  (2, 1) ->  2
  (1, 2) -> -1
  (2, 2) -> -1
  (1, 3) -> -0.50000
  (2, 3) -> -0.50000

Msg(css_lcu_exe): Factorization time: 0.000995
full_LU =

   2.00000  -1.00000
  -1.00000  -0.50000

n =  2
m =  2
k =  2
Test ALL (only if amount of stored columns in css equals 2 = k == min(n, m)):
Msg(css_lcu_exe): Extraction time: 0.000032
Msg(css_lcu_exe): Norm calculation time: 0.000026
Msg(css_lcu_exe): 1B. PASSED
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001413
full_L =

   2.00000   0.00000
  -1.00000  -0.50000

full_D =

   2.00000   0.00000
   0.00000  -0.50000

full_U =

   2.00000  -1.00000
   0.00000  -0.50000

Msg(css_lcu_exe): Norm calculation time: 0.000038
Msg(css_lcu_exe): 1C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 1D. PASSED
matrix 2 x 2 singular is stored with css with 1 column ...:
Msg(css_lcu_exe): STARTING test 2:
full_A =

   2  -1
   0   0

Msg(css_lcu_exe): Above matrix converted to css:
n =  2
m =  2
css_tp =

   1   3

i_tp =

   1   2

lu_tp =

Compressed Column Sparse (rows = 2, cols = 2, nnz = 3 [75%])

  (1, 1) ->  2
  (2, 1) ->  2
  (2, 2) -> -1

zero pivot at diagonal 2
n =  2
m =  2
css_tp =

   1   3

i_tp =

   1   2

lu_tp =

Compressed Column Sparse (rows = 2, cols = 2, nnz = 3 [75%])

  (1, 1) ->  2
  (2, 1) ->  2
  (2, 2) -> -1

Msg(css_lcu_exe): Factorization time: 0.000590
full_LU =

   2  -1
   0   0

n =  2
m =  2
k =  1
Msg(css_lcu_exe): 2A. PASSED: lcu stopped on zero pivot -- matrix not square or singular!
Test VER for A(:,1:1) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001373
full_L =

   2
   0

full_D =

   2
   0

full_U =

   2
   0

Msg(css_lcu_exe): Norm calculation time: 0.000034
Msg(css_lcu_exe): 2C. PASSED
Test HOR for A(1:1,:) amount of rows:
Msg(css_lcu_exe): 2D. PASSED
matrix 3 x 2 singular:
Msg(css_lcu_exe): STARTING test 3:
full_A =

   1  -1
   1   1
   1   2

Msg(css_lcu_exe): Above matrix converted to css:
n =  3
m =  2
css_tp =

   1   4   6

i_tp =

   1   2   3   2   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 5, nnz = 8 [80%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 2) -> -1
  (1, 3) ->  1
  (1, 4) ->  1
  (2, 4) ->  1
  (1, 5) ->  2

n =  3
m =  2
css_tp =

   1   4   6

i_tp =

   1   2   3   2   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 5, nnz = 8 [80%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 2) -> -1
  (1, 3) ->  1
  (1, 4) ->  2
  (2, 4) ->  2
  (1, 5) ->  3

Msg(css_lcu_exe): Factorization time: 0.001026
full_LU =

   1  -1
   1   2
   1   3

n =  3
m =  2
k =  2
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001906
full_L =

   1   0
   1   2
   1   3

full_D =

   1   0
   0   2
   0   0

full_U =

   1  -1
   0   2
   0   0

Msg(css_lcu_exe): Norm calculation time: 0.000036
Msg(css_lcu_exe): 3C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 3D. PASSED
matrix 2 x 3 singular:
Msg(css_lcu_exe): STARTING test 4:
full_A =

   1  -1   1
  -1   0   1

Msg(css_lcu_exe): Above matrix converted to css:
n =  2
m =  3
css_tp =

   1   4   5

i_tp =

   1   2   3   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 4, nnz = 6 [75%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) -> -1
  (2, 2) -> -1
  (2, 3) ->  1
  (2, 4) ->  1

n =  2
m =  3
css_tp =

   1   4   6

i_tp =

   1   2   3   2   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 5, nnz = 8 [80%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) -> -1
  (2, 2) -> -1
  (2, 3) ->  1
  (1, 4) -> -1
  (2, 4) -> -1
  (2, 5) ->  2

Msg(css_lcu_exe): Factorization time: 0.000979
full_LU =

   1  -1   1
  -1  -1   2

n =  2
m =  3
k =  2
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001382
full_L =

   1   0
  -1  -1

full_D =

   1   0
   0  -1

full_U =

   1  -1
   0  -1

Msg(css_lcu_exe): Norm calculation time: 0.000036
Msg(css_lcu_exe): 4C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 4D. PASSED
matrix 3 x 3 singular is stored with css with 1 column ...:
css must extend during factorization:
Msg(css_lcu_exe): STARTING test 4:
full_A =

   1  -1   1
  -1   0   0
   2   0   0

Msg(css_lcu_exe): Above matrix converted to css:
n =  3
m =  3
css_tp =

   1   4

i_tp =

   1   2   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 3, nnz = 6 [100%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) -> -1
  (2, 2) -> -1
  (1, 3) ->  2
  (2, 3) ->  1

zero pivot at diagonal 3
n =  3
m =  3
css_tp =

   1   4   6

i_tp =

   1   2   3   2   3

lu_tp =

Compressed Column Sparse (rows = 2, cols = 5, nnz = 10 [100%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) -> -1
  (2, 2) -> -1
  (1, 3) ->  2
  (2, 3) ->  1
  (1, 4) -> -1
  (2, 4) -> -1
  (1, 5) ->  2
  (2, 5) ->  1

Msg(css_lcu_exe): Factorization time: 0.000954
full_LU =

   1  -1   1
  -1  -1   1
   2   2   0

n =  3
m =  3
k =  2
Msg(css_lcu_exe): 4A. PASSED: lcu stopped on zero pivot -- matrix not square or singular!
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001871
full_L =

   1   0
  -1  -1
   2   2

full_D =

   1   0
   0  -1
   0   0

full_U =

   1  -1
   0  -1
   0   0

Msg(css_lcu_exe): Norm calculation time: 0.000035
Msg(css_lcu_exe): 4C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 4D. PASSED
matrix full square 7 x 7 non-singular:
Msg(css_lcu_exe): STARTING test 5:
full_A =

   30   39   48    1   10   19   28
   38   47    7    9   18   27   29
   46    6    8   17   26   35   37
    5   14   16   25   34   36   45
   13   15   24   33   42   44    4
   21   23   32   41   43    3   12
   22   31   40   49    2   11   20

Msg(css_lcu_exe): Above matrix converted to css:
n =  7
m =  7
css_tp =

    1    8   14   19   23   26   28   29

i_tp =

 Columns 1 through 20:

   1   2   3   4   5   6   7   2   3   4   5   6   7   3   4   5   6   7   4   5

 Columns 21 through 28:

   6   7   5   6   7   6   7   7

lu_tp =

Compressed Column Sparse (rows = 2, cols = 28, nnz = 56 [100%])

  (1, 1) ->  30
  (2, 1) ->  30
  (1, 2) ->  38
  (2, 2) ->  39
  (1, 3) ->  46
  (2, 3) ->  48
  (1, 4) ->  5
  (2, 4) ->  1
  (1, 5) ->  13
  (2, 5) ->  10
  (1, 6) ->  21
  (2, 6) ->  19
  (1, 7) ->  22
  (2, 7) ->  28
  (1, 8) ->  47
  (2, 8) ->  47
  (1, 9) ->  6
  (2, 9) ->  7
  (1, 10) ->  14
  (2, 10) ->  9
  (1, 11) ->  15
  (2, 11) ->  18
  (1, 12) ->  23
  (2, 12) ->  27
  (1, 13) ->  31
  (2, 13) ->  29
  (1, 14) ->  8
  (2, 14) ->  8
  (1, 15) ->  16
  (2, 15) ->  17
  (1, 16) ->  24
  (2, 16) ->  26
  (1, 17) ->  32
  (2, 17) ->  35
  (1, 18) ->  40
  (2, 18) ->  37
  (1, 19) ->  25
  (2, 19) ->  25
  (1, 20) ->  33
  (2, 20) ->  34
  (1, 21) ->  41
  (2, 21) ->  36
  (1, 22) ->  49
  (2, 22) ->  45
  (1, 23) ->  42
  (2, 23) ->  42
  (1, 24) ->  43
  (2, 24) ->  44
  (1, 25) ->  2
  (2, 25) ->  4
  (1, 26) ->  3
  (2, 26) ->  3
  (1, 27) ->  11
  (2, 27) ->  12
  (1, 28) ->  20
  (2, 28) ->  20

n =  7
m =  7
css_tp =

    1    8   14   19   23   26   28   29

i_tp =

 Columns 1 through 20:

   1   2   3   4   5   6   7   2   3   4   5   6   7   3   4   5   6   7   4   5

 Columns 21 through 28:

   6   7   5   6   7   6   7   7

lu_tp =

Compressed Column Sparse (rows = 2, cols = 28, nnz = 56 [100%])

  (1, 1) ->  30
  (2, 1) ->  30
  (1, 2) ->  38
  (2, 2) ->  39
  (1, 3) ->  46
  (2, 3) ->  48
  (1, 4) ->  5
  (2, 4) ->  1
  (1, 5) ->  13
  (2, 5) ->  10
  (1, 6) ->  21
  (2, 6) ->  19
  (1, 7) ->  22
  (2, 7) ->  28
  (1, 8) -> -2.4000
  (2, 8) -> -2.4000
  (1, 9) -> -53.800
  (2, 9) -> -53.800
  (1, 10) ->  7.5000
  (2, 10) ->  7.7333
  (1, 11) -> -1.9000
  (2, 11) ->  5.3333
  (1, 12) -> -4.3000
  (2, 12) ->  2.9333
  (1, 13) ->  2.4000
  (2, 13) -> -6.4667
  (1, 14) ->  1140.4
  (2, 14) ->  1140.4
  (1, 15) -> -160.13
  (2, 15) -> -157.89
  (1, 16) ->  45.792
  (2, 16) -> -108.89
  (1, 17) ->  94.792
  (2, 17) -> -59.889
  (1, 18) -> -49.000
  (2, 18) ->  139.03
  (1, 19) ->  26.831
  (2, 19) ->  26.831
  (1, 20) ->  32.784
  (2, 20) ->  33.711
  (1, 21) ->  39.568
  (2, 21) ->  33.591
  (1, 22) ->  49.216
  (2, 22) ->  39.646
  (1, 23) -> -3.3741
  (2, 23) -> -3.3741
  (1, 24) -> -14.219
  (2, 24) -> -5.1951
  (1, 25) -> -66.515
  (2, 25) -> -57.039
  (1, 26) -> -38.222
  (2, 26) -> -38.222
  (1, 27) ->  38.222
  (2, 27) ->  174.33
  (1, 28) ->  1225.0
  (2, 28) ->  1225.0

Msg(css_lcu_exe): Factorization time: 0.002776
full_LU =

 Columns 1 through 6:

     30.0000     39.0000     48.0000      1.0000     10.0000     19.0000
     38.0000     -2.4000    -53.8000      7.7333      5.3333      2.9333
     46.0000    -53.8000   1140.4167   -157.8889   -108.8889    -59.8889
      5.0000      7.5000   -160.1250     26.8309     33.7110     33.5910
     13.0000     -1.9000     45.7917     32.7842     -3.3741     -5.1951
     21.0000     -4.3000     94.7917     39.5682    -14.2191    -38.2222
     22.0000      2.4000    -49.0000     49.2160    -66.5147     38.2222

 Column 7:

     28.0000
     -6.4667
    139.0278
     39.6458
    -57.0388
    174.3333
   1225.0000

n =  7
m =  7
k =  7
Test ALL (only if amount of stored columns in css equals 7 = k == min(n, m)):
Msg(css_lcu_exe): Extraction time: 0.000035
Msg(css_lcu_exe): Norm calculation time: 0.000030
Msg(css_lcu_exe): 5B. PASSED
Test VER for A(:,1:7) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.003936
full_L =

 Columns 1 through 6:

   3.0000e+01   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00
   3.8000e+01  -2.4000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00
   4.6000e+01  -5.3800e+01   1.1404e+03   0.0000e+00   0.0000e+00   0.0000e+00
   5.0000e+00   7.5000e+00  -1.6013e+02   2.6831e+01   0.0000e+00   0.0000e+00
   1.3000e+01  -1.9000e+00   4.5792e+01   3.2784e+01  -3.3741e+00   0.0000e+00
   2.1000e+01  -4.3000e+00   9.4792e+01   3.9568e+01  -1.4219e+01  -3.8222e+01
   2.2000e+01   2.4000e+00  -4.9000e+01   4.9216e+01  -6.6515e+01   3.8222e+01

 Column 7:

   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   1.2250e+03

full_D =

 Columns 1 through 6:

   3.0000e+01   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00
   0.0000e+00  -2.4000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00
   0.0000e+00   0.0000e+00   1.1404e+03   0.0000e+00   0.0000e+00   0.0000e+00
   0.0000e+00   0.0000e+00   0.0000e+00   2.6831e+01   0.0000e+00   0.0000e+00
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00  -3.3741e+00   0.0000e+00
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00  -3.8222e+01
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00

 Column 7:

   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   0.0000e+00
   1.2250e+03

full_U =

 Columns 1 through 6:

   3.0000e+01   3.9000e+01   4.8000e+01   1.0000e+00   1.0000e+01   1.9000e+01
   0.0000e+00  -2.4000e+00  -5.3800e+01   7.7333e+00   5.3333e+00   2.9333e+00
   0.0000e+00   0.0000e+00   1.1404e+03  -1.5789e+02  -1.0889e+02  -5.9889e+01
   0.0000e+00   0.0000e+00   0.0000e+00   2.6831e+01   3.3711e+01   3.3591e+01
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00  -3.3741e+00  -5.1951e+00
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00  -3.8222e+01
   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00   0.0000e+00

 Column 7:

   2.8000e+01
  -6.4667e+00
   1.3903e+02
   3.9646e+01
  -5.7039e+01
   1.7433e+02
   1.2250e+03

Msg(css_lcu_exe): Norm calculation time: 0.000040
Msg(css_lcu_exe): 5C. PASSED
Test HOR for A(1:7,:) amount of rows:
Msg(css_lcu_exe): 5D. PASSED
Msg(css_lcu_exe): STARTING test 11:
full_A =

   1   0   1   0
   2   1  -1   0
   0  -1   0   1
  -2   0   1   3

Msg(css_lcu_exe): Above matrix converted to css:
n =  4
m =  4
css_tp =

   1   5   7   8   9

i_tp =

   1   2   3   4   2   3   4   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 8, nnz = 13 [81%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  2
  (2, 3) ->  1
  (1, 4) -> -2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) -> -1
  (2, 6) -> -1
  (1, 7) ->  1
  (2, 7) ->  1
  (1, 8) ->  3
  (2, 8) ->  3

n =  4
m =  4
css_tp =

    1    5    7    9   10

i_tp =

   1   2   3   4   2   3   3   4   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 9, nnz = 15 [83%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  2
  (2, 3) ->  1
  (1, 4) -> -2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) -> -1
  (2, 6) -> -3
  (1, 7) -> -3
  (2, 7) -> -3
  (1, 8) ->  3
  (2, 8) ->  1
  (1, 9) ->  4
  (2, 9) ->  4

Msg(css_lcu_exe): Factorization time: 0.001670
full_LU =

   1   0   1   0
   2   1  -3   0
   0  -1  -3   1
  -2   0   3   4

n =  4
m =  4
k =  4
Test ALL (only if amount of stored columns in css equals 4 = k == min(n, m)):
Msg(css_lcu_exe): Extraction time: 0.000033
Msg(css_lcu_exe): Norm calculation time: 0.000027
Msg(css_lcu_exe): 11B. PASSED
Test VER for A(:,1:4) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.002399
full_L =

   1   0   0   0
   2   1   0   0
   0  -1  -3   0
  -2   0   3   4

full_D =

   1   0   0   0
   0   1   0   0
   0   0  -3   0
   0   0   0   4

full_U =

   1   0   1   0
   0   1  -3   0
   0   0  -3   1
   0   0   0   4

Msg(css_lcu_exe): Norm calculation time: 0.000037
Msg(css_lcu_exe): 11C. PASSED
Test HOR for A(1:4,:) amount of rows:
Msg(css_lcu_exe): 11D. PASSED
Msg(css_lcu_exe): STARTING test 13:
full_A =

   1   0   1   2
   1   1   2   1
   0   1   2   1
   3   4   4   2

Msg(css_lcu_exe): Above matrix converted to css:
n =  4
m =  4
css_tp =

    1    5    8   10   11

i_tp =

   1   2   3   4   2   3   4   3   4   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 10, nnz = 18 [90%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  2
  (1, 7) ->  4
  (2, 7) ->  1
  (1, 8) ->  2
  (2, 8) ->  2
  (1, 9) ->  4
  (2, 9) ->  1
  (1, 10) ->  2
  (2, 10) ->  2

n =  4
m =  4
css_tp =

    1    5    8   10   11

i_tp =

   1   2   3   4   2   3   4   3   4   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 10, nnz = 18 [90%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  1
  (1, 7) ->  4
  (2, 7) -> -1
  (1, 8) ->  1
  (2, 8) ->  1
  (1, 9) -> -3
  (2, 9) ->  2
  (1, 10) ->  6
  (2, 10) ->  6

Msg(css_lcu_exe): Factorization time: 0.001699
full_LU =

   1   0   1   2
   1   1   1  -1
   0   1   1   2
   3   4  -3   6

n =  4
m =  4
k =  4
Test ALL (only if amount of stored columns in css equals 4 = k == min(n, m)):
Msg(css_lcu_exe): Extraction time: 0.000032
Msg(css_lcu_exe): Norm calculation time: 0.000027
Msg(css_lcu_exe): 13B. PASSED
Test VER for A(:,1:4) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.002398
full_L =

   1   0   0   0
   1   1   0   0
   0   1   1   0
   3   4  -3   6

full_D =

   1   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   6

full_U =

   1   0   1   2
   0   1   1  -1
   0   0   1   2
   0   0   0   6

Msg(css_lcu_exe): Norm calculation time: 0.000037
Msg(css_lcu_exe): 13C. PASSED
Test HOR for A(1:4,:) amount of rows:
Msg(css_lcu_exe): 13D. PASSED
Msg(css_lcu_exe): STARTING test 14:
full_A =

   1   0   1   2
   1   1   2   1
   0   1   1   1
   3   4   4   2

Msg(css_lcu_exe): Above matrix converted to css:
n =  4
m =  4
css_tp =

    1    5    8   10   11

i_tp =

   1   2   3   4   2   3   4   3   4   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 10, nnz = 18 [90%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  2
  (1, 7) ->  4
  (2, 7) ->  1
  (1, 8) ->  1
  (2, 8) ->  1
  (1, 9) ->  4
  (2, 9) ->  1
  (1, 10) ->  2
  (2, 10) ->  2

zero pivot at diagonal 3
n =  4
m =  4
css_tp =

   1   5   8

i_tp =

   1   2   3   4   2   3   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 7, nnz = 12 [86%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  1
  (1, 7) ->  4
  (2, 7) -> -1

Msg(css_lcu_exe): Factorization time: 0.000961
full_LU =

   1   0   1   2
   1   1   1  -1
   0   1   0   0
   3   4   0   0

n =  4
m =  4
k =  2
Msg(css_lcu_exe): 14A. PASSED: lcu stopped on zero pivot -- matrix not square or singular!
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.002399
full_L =

   1   0
   1   1
   0   1
   3   4

full_D =

   1   0
   0   1
   0   0
   0   0

full_U =

   1   0
   0   1
   0   0
   0   0

Msg(css_lcu_exe): Norm calculation time: 0.000036
Msg(css_lcu_exe): 14C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 14D. PASSED
Msg(css_lcu_exe): STARTING test 15:
full_A =

   1   0   1
   1   1   2
   0   1   1
   3   4   4

Msg(css_lcu_exe): Above matrix converted to css:
n =  4
m =  3
css_tp =

    1    5    8   10

i_tp =

   1   2   3   4   2   3   4   3   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 9, nnz = 13 [72%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  2
  (1, 7) ->  4
  (1, 8) ->  1
  (2, 8) ->  1
  (1, 9) ->  4

zero pivot at diagonal 3
n =  4
m =  3
css_tp =

   1   5   8

i_tp =

   1   2   3   4   2   3   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 7, nnz = 10 [71%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (1, 4) ->  3
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  1
  (1, 7) ->  4

Msg(css_lcu_exe): Factorization time: 0.000958
full_LU =

   1   0   1
   1   1   1
   0   1   0
   3   4   0

n =  4
m =  3
k =  2
Msg(css_lcu_exe): 15A. PASSED: lcu stopped on zero pivot -- matrix not square or singular!
Test VER for A(:,1:2) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.002363
full_L =

   1   0
   1   1
   0   1
   3   4

full_D =

   1   0
   0   1
   0   0
   0   0

full_U =

   1   0
   0   1
   0   0
   0   0

Msg(css_lcu_exe): Norm calculation time: 0.000036
Msg(css_lcu_exe): 15C. PASSED
Test HOR for A(1:2,:) amount of rows:
Msg(css_lcu_exe): 15D. PASSED
Msg(css_lcu_exe): STARTING test 16:
full_A =

   1   0   1   2
   1   1   2   1
   0   1   2   1

Msg(css_lcu_exe): Above matrix converted to css:
n =  3
m =  4
css_tp =

    1    5    8   10

i_tp =

   1   2   3   4   2   3   4   3   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 9, nnz = 13 [72%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  2
  (2, 7) ->  1
  (1, 8) ->  2
  (2, 8) ->  2
  (2, 9) ->  1

n =  3
m =  4
css_tp =

    1    5    8   10

i_tp =

   1   2   3   4   2   3   4   3   4

lu_tp =

Compressed Column Sparse (rows = 2, cols = 9, nnz = 13 [72%])

  (1, 1) ->  1
  (2, 1) ->  1
  (1, 2) ->  1
  (2, 3) ->  1
  (2, 4) ->  2
  (1, 5) ->  1
  (2, 5) ->  1
  (1, 6) ->  1
  (2, 6) ->  1
  (2, 7) -> -1
  (1, 8) ->  1
  (2, 8) ->  1
  (2, 9) ->  2

Msg(css_lcu_exe): Factorization time: 0.001309
full_LU =

   1   0   1   2
   1   1   1  -1
   0   1   1   2

n =  3
m =  4
k =  3
Test VER for A(:,1:3) amount of columns:
Msg(css_lcu_exe): Extraction time: 0.001878
full_L =

   1   0   0
   1   1   0
   0   1   1

full_D =

   1   0   0
   0   1   0
   0   0   1

full_U =

   1   0   1
   0   1   1
   0   0   1

Msg(css_lcu_exe): Norm calculation time: 0.000036
Msg(css_lcu_exe): 16C. PASSED
Test HOR for A(1:3,:) amount of rows:
Msg(css_lcu_exe): 16D. PASSED
